%import common.CNAME
%import common.WS
%import common.LETTER
%import common.DIGIT
%import common.ESCAPED_STRING
%ignore WS
 
SYMBOL : (LETTER | DIGIT | "_" | "âˆ…")+

symbol: SYMBOL

fname: symbol
atom_term: symbol

abstract_term: atom_term
  | fname "(" abstract_term_list ")" -> composed_abstract_term
  | "(" abstract_term_list_spec ")" -> abstract_term_sequence
  | "{" abstract_term_list "}" -> abstract_term_set
  | "{" logic_simple ":" logic_simple "}" -> abstract_term_selection

abstract_term_list: [logic_simple ("," logic_simple)*]
abstract_term_list_spec: [(logic_simple ",")+ (logic_simple|)]

// Program
fname_list: [fname ("," fname)*]

expression: logic_simple -> logic_expression
  | "axiom" logic_simple -> axiom_expression
  | "let" logic_simple -> definition_expression
  | "pick" fname_list "where" logic_simple -> pick_const_declaration_with_constrain_expression
  | "use" fname_list "where" logic_simple -> use_const_declaration_with_constrain_expression
  | "assume" logic_simple -> assumption_expression
  | "then" logic_simple -> conclusion_expression 
  | "take" fname_list -> take_const_declaration
  | "use" fname_list -> use_const_declaration
  | "begin" expression_list "end" -> context_block
  | "include" ESCAPED_STRING -> include_expression
  | ("theorem" | "lemma" | "proposition") logic_simple "proof" expression_list "qed" -> theorem_context_block

expression_list: [expression (";" expression)* (|";")]